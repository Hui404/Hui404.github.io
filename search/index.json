[{"content":"LCD1602简介 LCD1602字符型液晶（每行显示16个字符，一共可以显示两行）——一种专门用来显示字母、数字、符号的点阵型液晶模块。它由若干个5x7或者5x10的点阵字符组成，每个点阵字符位都可以用来显示一个字符，每位之间有一个点距的间隔，每行之间也有间隔，起到了字符间距和行间距的作用，正因为如此，所以它不能很好的显示图片。\nLCD1602主要技术参数 LCD1602的接口 VSS：接地 VDD：接电源正级，注意电压即可 VL: 接地 RS: 当RS为高电平时，对1602进行数据字节的传输操作，而为低电平时，则进行命令字节的传输操作 R/W：高电平时读取1602的数据，反之则对1602进行写数据操作 E\t：使能信号，可以看作LCD1602的时钟信号，用以产生脉冲实现写数据操作等等 D0~D7：数据并行口，用于传输数据，占用8个IO口\n基本操作时序 LCD1602一般只作为显示使用，不太需要进行读操作和读数据\n写指令 输入：RS=L,RW=L,D0~D7=指令码，E=高脉冲（将E置为高电平后，再给低电平以产生高脉冲）\n写数据 输入：RS=H,RW=L,D0~D7=数据，E=高脉冲\nRAM地址映射图 LCD1602内带有80x8位（80字节）的RAM缓冲区，但只有每一列的前16个字符才会显示在屏幕上，如果写入了前16给以外的地址，则显示不出来，当屏幕整体移动一定位时，可以显示原本不显示的数据，两边地址的数据也会移动\n指令说明 初始化步骤一般为\n显示模式设置 显示开/关光标设置 数据控制 数据指针设置（即选择要存放数据的地址） 读或写数据 Proteus仿真原理图 程序include \u0026lt;reg52.h\u0026gt; sbit E\t= P2^6; sbit RS = P2^4; sbit RW = P2^5; sbit S1 = P3^0; sbit S2 = P3^1; sbit S3 = P3^2; sbit S4 = P3^3; #define LCD_Data P0 unsigned long second = 0; unsigned char Hour = 0; unsigned char Min = 0; unsigned char Sec = 0; unsigned char flag1 = 1; unsigned int time0 = 0; unsigned int time1 = 0; unsigned char S1_flag0 = 1; unsigned char S1_flag1 = 1; unsigned char S2_flag0 = 1; unsigned char S2_flag1 = 1; unsigned char S3_flag0 = 1; unsigned char S3_flag1 = 1; unsigned char S4_flag0 = 1; unsigned char S4_flag1 = 1; void LCD_Delay(unsigned char time) {\twhile(time--) { unsigned char i = 0; for(i = 0; i\u0026lt;123;i++); } } void LCD_WriteCom(unsigned char com) {\tRS = 0; RW = 0; LCD_Data = com; E = 1; LCD_Delay(1); E = 0; LCD_Delay(1); } void LCD_WriteData(unsigned char Data) {\tRS = 1; RW = 0; LCD_Data = Data; E = 1; LCD_Delay(1); E = 0; LCD_Delay(1); } void LCD_Init(void) { LCD_WriteCom(0x38);\t//设置16x2显示，5x7点阵，8位数据接口 LCD_WriteCom(0x0C);\t// 0000 1100 LCD_WriteCom(0x06);\t//0000 0110 LCD_WriteCom(0x01);\t//清除 复位 } void LCD_SetCursor(unsigned Line, unsigned char Column) { if(Line == 1) { LCD_WriteCom(0x80|(Column - 1)); } else { LCD_WriteCom(0x80|(Column) + 0x40); } } void LCD_ShowChar(unsigned char Line, unsigned char Column,unsigned char Char) { LCD_SetCursor(Line, Column); LCD_WriteData(Char); } void LCD_ShowNum(unsigned char Line, unsigned char Column, unsigned char Num) { LCD_SetCursor(Line, Column); LCD_WriteData(\u0026#39;0\u0026#39; + Num); } void Clock_Set(unsigned char hour,unsigned char min,unsigned char sec) { second =(hour*3600) + (min*60) +(sec); } void Clock_Config(void) { Hour =(second / 3600 / 10 * 10 + second / 3600 % 10); Min = (second % 3600 / 60 / 10 * 10 + second % 3600 / 60 % 10); Sec = (second % 3600 % 60 / 10 * 10 + second % 3600 % 60 % 10); } void Time_Clock(void) { LCD_ShowNum(1,1,Hour / 10); LCD_ShowNum(1,2,Hour % 10);\t//时 LCD_ShowNum(1,4,Min / 10); LCD_ShowNum(1,5,Min\t% 10);\t//分 LCD_ShowNum(1,7,Sec / 10); LCD_ShowNum(1,8,Sec % 10);\t//秒 if(flag1 == 1) { LCD_ShowChar(1,3,\u0026#39;:\u0026#39;); LCD_ShowChar(1,6,\u0026#39;:\u0026#39;);\t} else if(flag1 == 0) { LCD_ShowChar(1,3,\u0026#39; \u0026#39;); LCD_ShowChar(1,6,\u0026#39; \u0026#39;);\t} if(Hour \u0026gt; 23) { Hour = 0; } if(Min \u0026gt; 59) { Min = 0; } if(Sec \u0026gt; 59) { Sec = 0; } } void Time_Init(void) { EA = 1; TMOD = 0x01; ET0 = 1; TR0 = 1; TH0 = 64535 / 256; TL0 = 64535 % 256; } void main(void) { LCD_Init(); Time_Init(); Clock_Set(12,34,03); //设置时间 Clock_Config(); while(1) { Time_Clock(); } }\tvoid Time_IT(void) interrupt 1 { time0 ++; time1 ++; TH0 = 64535/256; TL0 = 64535%256; if(time0 == 500) {\tif(flag1 == 0) { flag1 = 1; } else if(flag1 == 1) { flag1 = 0; } time0 =0; } if(time1 == 20)\t//非阻塞按键扫描 { S1_flag1 = S1_flag0;\t//保存上一次的值 S1_flag0 = S1;\t//获取新的值 S2_flag1 = S2_flag0;\t//保存上一次的值 S2_flag0 = S2;\t//获取新的值 S3_flag1 = S3_flag0;\t//保存上一次的值 S3_flag0 = S3;\t//获取新的值 S4_flag1 = S4_flag0;\t//保存上一次的值 S4_flag0 = S4;\t//获取新的值 if(S1_flag1 == 1 \u0026amp;\u0026amp; S1_flag0 == 0) { Hour++; } if(S2_flag1 == 1 \u0026amp;\u0026amp; S2_flag0 == 0) { Hour--; } if(S3_flag1 == 1 \u0026amp;\u0026amp; S3_flag0 == 0) { Min++; } if(S4_flag1 == 1 \u0026amp;\u0026amp; S4_flag0 == 0) { Min--; } time1 = 0; } } ","date":"2024-11-13T22:13:15+08:00","permalink":"https://Hui404.github.io/p/c51%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8Elcd1602%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81/","title":"C51单片机与LCD1602显示代码"},{"content":"创建新博客\n1 2 3 4 hugo new content post/new/index.md #post 为文件夹 #new 博客名 #index md文件的名字 本地部署\n1 hugo server -D 上传博客\n1 2 3 4 5 6 7 8 git add . #添加文件 git commit -m \u0026#34;updata\u0026#34; #上传信息 git push #推送到远端 ","date":"2024-11-13T22:03:21+08:00","permalink":"https://Hui404.github.io/p/%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/","title":"博客上传"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://Hui404.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://Hui404.github.io/p/test-chinese/","title":"Chinese Test"}]